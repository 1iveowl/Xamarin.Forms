parameters:
  name: ''            # in the form type_platform_host
  displayName: ''     # the human name
  vmImage: ''         # the VM image
  vmPool: ''         # the VM pool
  targetFolder: ''    # the bootstrapper target
  dependsOn: []       # the dependiencies
  preBuildSteps: []   # any steps to run before the build
  postBuildSteps: []  # any additional steps to run after the build
  buildConfiguration: ''
  buildTaskPath : 'Xamarin.Forms.Build.Tasks/Xamarin.Forms.Build.Tasks.csproj'
  slnPath : 'Xamarin.Forms.sln'
  iOSCertSecureFileName: 'Xamarin Forms iOS Certificate.p12'
  iOSProvisioningSecureFileName: 'Xamarin Forms iOS Provisioning.mobileprovision'

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
      demands:
        - Agent.OS -equals darwin
        - sh
        - msbuild
        - Xamarin.iOS
    dependsOn: ${{ parameters.dependsOn }}
    steps:
      - checkout: self
        clean: true
      
      - task: Bash@3
        displayName: 'Cake Provision'
        condition: eq(variables['provisioningCake'], 'true')
        inputs:
          targetType: 'filePath'
          filePath: 'build.sh'
          arguments: --target provision
  
      - task: UseDotNet@2
        displayName: 'Install .net core $(DOTNET_VERSION)'
        condition: ne(variables['DOTNET_VERSION'], '')  
        inputs:
          packageType: 'sdk'
          version: $(DOTNET_VERSION)
      
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        condition: ne(variables['NUGET_VERSION'], '')
        inputs:
          versionSpec: $(NUGET_VERSION)

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: ${{ parameters.slnPath }}

      - task: MSBuild@1
        displayName: 'Build ${{ parameters.buildTaskPath  }}'
        inputs:
          solution: ${{ parameters.buildTaskPath }}

      - task: InstallAppleCertificate@2
        displayName: 'Install an Apple certificate'
        inputs:
          certSecureFile: ${{ parameters.iOSCertSecureFileName }}
          certPwd: $(P12password)

      - task: InstallAppleProvisioningProfile@1
        displayName: 'Install an Apple provisioning profile'
        inputs:
          provProfileSecureFile: ${{ parameters.iOSProvisioningSecureFileName }}

      - task: XamariniOS@2
        displayName: 'Build Xamarin.iOS solution ${{ parameters.slnPath }}'
        inputs:
          solutionFile: ${{ parameters.slnPath }}
          configuration: ${{ parameters.buildConfiguration }}

      - task: CopyFiles@2
        displayName: 'Copy test-cloud.exe'
        inputs:
          Contents: '**/Xamarin.UITest.*/tools/test-cloud.exe'
          TargetFolder: '$(build.artifactstagingdirectory)/testcloud'
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true

      - task: CopyFiles@2
        displayName: 'Copy iOS Files for UITest'
        inputs:
          Contents: |
              **/$(IpaName)
              Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/**

          TargetFolder: '$(build.artifactstagingdirectory)/ios'
          CleanTargetFolder: true
          flattenFolders: true

      - task: CopyFiles@2
        displayName: 'Copy Android Files for UITest'
        inputs:
          Contents: 'Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/**'
          TargetFolder: '$(build.artifactstagingdirectory)/android'
          CleanTargetFolder: true
          flattenFolders: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: iOS'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: OSXArtifacts