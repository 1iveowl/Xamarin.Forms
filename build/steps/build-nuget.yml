parameters:
  name: ''            # in the form type_platform_host
  displayName: ''     # the human name
  vmImage: ''         # the VM image
  vmPool: ''         # the VM pool
  targetFolder: ''    # the bootstrapper target
  dependsOn: []       # the dependiencies
  preBuildSteps: []   # any steps to run before the build
  postBuildSteps: []  # any additional steps to run after the build
  githubToken: '$(GitHub.Token)'
  sourceBranch : '$(Build.SourceBranch)'
  buildConfiguration: ''
  packageVersion : '9.9.9'

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
    dependsOn: ${{ parameters.dependsOn }}
    condition: succeeded()
    variables:
      nugetPackageVersion: ${{ parameters.packageVersion }}
      FormsIdAppend: ''
    steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download build artifact win_build'
        inputs:
          artifactName: 'win_build'
          downloadPath: '$(Build.ArtifactsDirectory)'

      - task: CopyFiles@2
        displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)'
        inputs:
          SourceFolder: '$(Build.ArtifactsDirectory)/win_build'
          TargetFolder: '$(System.DefaultWorkingDirectory)'

      - task: PowerShell@1
        displayName: 'Generate docs from docs repo'
        inputs:
          scriptName: 'build/scripts/generate-docs.ps1'
          arguments: '${{ parameters.sourceBranch }}  ${{ parameters.githubToken }}'
          workingFolder: '$(System.DefaultWorkingDirectory)/build/scripts'
          failOnStandardError: false

      - task: NuGetToolInstaller@0
        displayName: 'Use NuGet: $(NUGET_VERSION)'
        inputs:
          versionSpec: $(NUGET_VERSION)

      - task: NuGetCommand@2
        displayName: 'Make NuGet Package'
        inputs:
          command: pack
          feedsToUse: config
          packagesToPack: '.nuspec/*.nuspec'
          packDestination: '$(Build.ArtifactStagingDirectory)/nuget/debug'
          versioningScheme: byEnvVar
          versionEnvVar: nugetPackageVersion
          configuration: ${{ parameters.buildConfiguration }}

      - powershell: |
          $buildConfiguration = "Release"
          $formsNugetVersion = "" + $env:nugetPackageVersion

          Write-Host("Update nuspecs")
          Get-ChildItem './.nuspec/*.nuspec' -Recurse | Foreach-Object {
                (Get-Content $_) | Foreach-Object  {
                    $_ -replace '\$version\$', $formsNugetVersion `
                       -replace '\$Configuration\$', $buildConfiguration `
              } | Set-Content $_
          }
        failOnStderr: true
        displayName: 'Update nuspecs'
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/tags/')))

      - task: NuGetCommand@2
        displayName: 'Make NuGet Package Release'
        inputs:
          command: pack
          feedsToUse: config
          packagesToPack: '.nuspec/*.nuspec'
          packDestination: '$(Build.ArtifactStagingDirectory)/nuget/release'
          versioningScheme: byEnvVar
          versionEnvVar: nugetPackageVersion
        condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/tags/')))

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: nuget'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
          ArtifactName: nuget